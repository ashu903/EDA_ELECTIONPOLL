# -*- coding: utf-8 -*-
"""EDA_ELECTION_POLL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yC_dJKcUAh4BkAzK1sY7I6EY6BygyBNA

2. Do the Eda on this Dataset :Presidential Election Polls 2024 Dataset and extract useful information from
this:


LINK:Dataset: Nationwide Russian election poll data from March 04, 2024
"""

# Dataset: Nationwide Russian election poll data from March 04, 2024
#Dataset Description:
# This dataset comprises the results of a nationwide presidential election poll conducted on March 4, 2024. The
# data offers various insights but does not align with the official election results. You are encouraged to create
# your notebooks and delve into the data for further exploration.

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
import warnings
warnings.filterwarnings('ignore')

# Read the dataset
df=pd.read_csv('/content/election2024.csv')
df.head()

df.shape

"""3. Data Checks to perform

.Check Missing values

.Check data type

.Check the number of unique values of each column

.Check statistics of data set

.check various categories present in the different

.categorical column.
"""

## check missing Values
df.isnull().sum()

df.shape

df.fillna("0",inplace=True)

df.isnull().sum()

## Check Duplicates
df.duplicated().sum()

df.drop_duplicates(inplace=True)

df.dtypes

df.tail()

## check datatypes
df.info()

## 3.1 Checking the number of uniques values of each columns
df.nunique()

## Check the statistics of the dataset
df.describe()

[feature for feature in df.columns if df[feature].dtype=='O']

# numerical and categorical features
numerical_features=[feature for feature in df.columns if df[feature].dtype!='O']
categorical_feature=[feature for feature in df.columns if df[feature].dtype=='O']

numerical_features

categorical_feature

df['job_type'].value_counts()

df['sex'].value_counts()

### Explore More Visualization
fig,axis=plt.subplots(1,2,figsize=(15,7))
plt.subplot(121)
sns.histplot(data=df,x='job_type',bins=30,kde=True,color='g')
plt.subplot(122)
sns.histplot(data=df,x='job_type',bins=30,kde=True,hue='candidate')

plt.subplots(1,3,figsize=(25,6))
plt.subplot(141)
sns.histplot(data=df,x='job_type',kde=True,hue='candidate')
plt.subplot(142)
sns.histplot(data=df[df.sex=='female'],x='job_type',kde=True,hue='candidate')
plt.subplot(143)
sns.histplot(data=df[df.sex=='male'],x='job_type',kde=True,hue='candidate')

# Convert relevant columns to numeric type if possible
for col in df.columns:
    if df[col].dtype == 'object':  # Check if column is of object (string) type
        try:
            df[col] = pd.to_numeric(df[col], errors='coerce')  # Attempt conversion, replace non-convertible values with NaN
        except:
            pass  # Skip columns that cannot be converted

sns.heatmap(df.corr(), annot=True)  # Use correlation matrix for numerical heatmap

df.columns

df.company_type

corr = df
plt.figure(figsize=(12,12))
sns.heatmap(corr,cbar=True,square=True,fmt='.1f',annot=True,cmap='Reds')

